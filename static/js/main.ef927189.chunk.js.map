{"version":3,"sources":["QuoteBox.js","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","props","initialLoad","react_default","a","createElement","id","quote","length","index_es","icon","faQuoteLeft","author","href","faTwitter","onClick","handleClick","require","polyfill","backgroundImages","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","backgroundNum","updateQuote","bind","assertThisInitialized","_this2","newBackgroundNum","fetchJsonp","jsonpCallback","then","response","json","setState","quoteText","replace","quoteAuthor","catch","error","console","log","forEach","background","Image","src","imageUrl","styles","backgroundImage","className","style","dist_default","src_QuoteBox","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8VA+CeA,MAzCf,SAAkBC,GAChB,OAAIA,EAAMC,YAENC,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,yBAKFF,EAAAC,EAAAC,cAAA,OAAKC,GAAG,aACNH,EAAAC,EAAAC,cAAA,OAAKC,GAAG,kBACNH,EAAAC,EAAAC,cAAA,KAAGC,GAAG,QACHL,EAAMM,MAAMC,OAAS,GAAKL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAMC,MACjDV,EAAMM,MAAMC,OAAS,GAAK,IAAMP,EAAMM,OAEzCJ,EAAAC,EAAAC,cAAA,KAAGC,GAAG,UACHL,EAAMM,MAAMC,OAAS,IACnBP,EAAMW,OAAOJ,OAAS,EAAI,KAAOP,EAAMW,OAAS,iBAIvDT,EAAAC,EAAAC,cAAA,KACEC,GAAG,cACHO,KACE,yCACAZ,EAAMM,MACN,KACAN,EAAMW,QAGRT,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAiBC,KAAMI,MATzB,UAYAX,EAAAC,EAAAC,cAAA,UAAQC,GAAG,YAAYS,QAASd,EAAMe,aAAtC,mDChCRC,EAAQ,KAAeC,WAEvB,IAAMC,EAAmB,CACvB,oCACA,+CACA,mCACA,oCACA,oCACA,gCACA,8BAuEaC,cAnEb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAEKI,MAAQ,CACXrB,MAAO,GACPK,OAAQ,GACRiB,eAAgB,EAChB3B,aAAa,GAGfmB,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IAVPA,6EAaA,IAAAY,EAAAT,KAENU,GACHV,KAAKI,MAAMC,cAAgB,GAAKV,EAAiBX,OAEpD2B,IACE,0FACA,CAAEC,cAAe,UAEhBC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GACJN,EAAKO,SAAS,CACZjC,MAAOgC,EAAKE,UAAUC,QAAQ,aAAc,IAC5C9B,OAAQ2B,EAAKI,YACbd,cAAeK,EACfhC,aAAa,MAGhB0C,MAAM,SAAAC,GACLC,QAAQC,IAAI,iBAAkBF,iDAMlC1B,EAAiB6B,QAAQ,SAAAC,IACX,IAAIC,OACZC,IAAM,YAAcF,IAG1BzB,KAAKM,+CAIL,IAAMsB,EAAW,YAAcjC,EAAiBK,KAAKI,MAAMC,eACvDwB,EAAS,GAKb,OAJK7B,KAAKI,MAAM1B,cACdmD,EAAS,CAAEC,gBAAiB,OAASF,EAAW,MAIhDjD,EAAAC,EAAAC,cAAA,OAAKkD,UAAU,gBAAgBC,MAAOH,GACpClD,EAAAC,EAAAC,cAACoD,EAAArD,EAAD,MACAD,EAAAC,EAAAC,cAACqD,EAAD,CACEnD,MAAOiB,KAAKI,MAAMrB,MAClBK,OAAQY,KAAKI,MAAMhB,OACnBI,YAAaQ,KAAKM,YAClB5B,YAAasB,KAAKI,MAAM1B,sBA7DhByD,IAAMC,WCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.ef927189.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./QuoteBox.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { faQuoteLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction QuoteBox(props) {\r\n  if (props.initialLoad) {\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <h3>Loading...</h3>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <div id=\"text-container\">\r\n          <p id=\"text\">\r\n            {props.quote.length > 0 && <FontAwesomeIcon icon={faQuoteLeft} />}\r\n            {props.quote.length > 0 && \" \" + props.quote}\r\n          </p>\r\n          <p id=\"author\">\r\n            {props.quote.length > 0 &&\r\n              (props.author.length > 0 ? \"- \" + props.author : \"- Anonymous\")}\r\n          </p>\r\n        </div>\r\n\r\n        <a\r\n          id=\"tweet-quote\"\r\n          href={\r\n            \"https://twitter.com/intent/tweet?text=\" +\r\n            props.quote +\r\n            \" -\" +\r\n            props.author\r\n          }\r\n        >\r\n          <FontAwesomeIcon icon={faTwitter} /> Tweet\r\n        </a>\r\n\r\n        <button id=\"new-quote\" onClick={props.handleClick}>\r\n          New Quote\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteBox;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport QuoteBox from \"./QuoteBox\";\nimport fetchJsonp from \"fetch-jsonp\";\nimport ReactFCCtest from \"react-fcctest\";\n\n// polyfill required since IE8/9/10/11 does not support Promises\nrequire(\"es6-promise\").polyfill();\n\nconst backgroundImages = [\n  \"backlit-chiemsee-dawn-1363876.jpg\",\n  \"austria-dawn-desktop-backgrounds-1323550.jpg\",\n  \"africa-animal-animals-417142.jpg\",\n  \"background-blur-bright-220067.jpg\",\n  \"blooming-blur-close-up-459059.jpg\",\n  \"clouds-dawn-horizon-33067.jpg\",\n  \"fog-foggy-lake-2649403.jpg\"\n];\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      quote: \"\",\n      author: \"\",\n      backgroundNum: -1,\n      initialLoad: true\n    };\n\n    this.updateQuote = this.updateQuote.bind(this);\n  }\n\n  updateQuote() {\n    // calculate a new random index for the background image\n    const newBackgroundNum =\n      (this.state.backgroundNum + 1) % backgroundImages.length;\n\n    fetchJsonp(\n      \"https://api.forismatic.com/api/1.0/?method=getQuote&lang=en&format=jsonp&jsonp=callback\",\n      { jsonpCallback: \"jsonp\" }\n    )\n      .then(response => response.json())\n      .then(json => {\n        this.setState({\n          quote: json.quoteText.replace(/^\\s+|\\s+$/g, \"\"),\n          author: json.quoteAuthor,\n          backgroundNum: newBackgroundNum,\n          initialLoad: false\n        });\n      })\n      .catch(error => {\n        console.log(\"parsing failed\", error);\n      });\n  }\n\n  componentDidMount() {\n    // force browser to pre-download background images\n    backgroundImages.forEach(background => {\n      const img = new Image();\n      img.src = \"./images/\" + background;\n    });\n\n    this.updateQuote();\n  }\n\n  render() {\n    const imageUrl = \"./images/\" + backgroundImages[this.state.backgroundNum];\n    let styles = {};\n    if (!this.state.initialLoad) {\n      styles = { backgroundImage: \"url(\" + imageUrl + \")\" };\n    }\n\n    return (\n      <div className=\"app-container\" style={styles}>\n        <ReactFCCtest />\n        <QuoteBox\n          quote={this.state.quote}\n          author={this.state.author}\n          handleClick={this.updateQuote}\n          initialLoad={this.state.initialLoad}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import \"react-app-polyfill/ie11\";\nimport \"react-app-polyfill/stable\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}